import json
import matplotlib.pyplot as plt
from matplotlib import ticker

# --------------------------
# üîπ H√†m ƒë·ªçc d·ªØ li·ªáu t·ª´ JSON
# --------------------------
def load_json(filename):
    """ƒê·ªçc file JSON v√† tr·∫£ v·ªÅ d·ªØ li·ªáu d∆∞·ªõi d·∫°ng dict (key: date, value: danh s√°ch 24 gi√° tr·ªã)"""
    with open(filename, "r") as f:
        return json.load(f)

# --------------------------
# üîπ H√†m t√≠nh t·ªïng (ho·∫∑c trung b√¨nh) theo th√°ng
# --------------------------
def aggregate_monthly(data):
    """
    Gi·∫£ s·ª≠ data l√† dict v·ªõi key l√† ng√†y ("YYYY-MM-DD") v√† value l√† list 24 gi√° tr·ªã.
    T√≠nh t·ªïng h√†ng ng√†y (sum c·ªßa 24 gi·ªù) r·ªìi nh√≥m theo th√°ng.
    """
    monthly = {}
    for date_str, hourly_values in data.items():
        daily_total = sum(hourly_values)
        # L·∫•y ph·∫ßn "YYYY-MM" c·ªßa ng√†y
        month = date_str[:7]
        monthly[month] = monthly.get(month, 0) + daily_total
    return monthly

# --------------------------
# üîπ ƒê·ªçc d·ªØ li·ªáu t·ª´ c√°c file JSON ƒë√£ l∆∞u tr∆∞·ªõc ƒë√≥
# --------------------------
consumption_with_renewable = load_json("with_solar_S_plus.json")
consumption_without_renewable = load_json("no_solar_S_plus.json")
cost_with_renewable = load_json("with_solar_cost.json")
cost_without_renewable = load_json("no_solar_cost.json")

# --------------------------
# üîπ T√≠nh t·ªïng theo th√°ng
# --------------------------
monthly_consumption_with = aggregate_monthly(consumption_with_renewable)
monthly_consumption_without = aggregate_monthly(consumption_without_renewable)
monthly_cost_with = aggregate_monthly(cost_with_renewable)
monthly_cost_without = aggregate_monthly(cost_without_renewable)

# L·∫•y danh s√°ch th√°ng ƒë√£ s·∫Øp x·∫øp (v√≠ d·ª•: "2018-05", "2018-06", ‚Ä¶)
months = sorted(monthly_consumption_with.keys())

# Chu·∫©n b·ªã d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì
consumption_with_values = [monthly_consumption_with[month] for month in months]
consumption_without_values = [monthly_consumption_without.get(month, 0) for month in months]
cost_with_values = [monthly_cost_with[month] for month in months]
cost_without_values = [monthly_cost_without.get(month, 0) for month in months]

# --------------------------
# üîπ V·∫Ω bi·ªÉu ƒë·ªì t·ªïng l∆∞·ª£ng ƒëi·ªán ti√™u th·ª• theo th√°ng
# --------------------------
plt.figure(figsize=(10, 5))
plt.plot(months, consumption_without_values, label="Without Solar energy", color="red", linestyle="--", marker="o")
plt.plot(months, consumption_with_values, label="With Solar energy", color="green", linestyle="-", marker="s")
plt.xlabel("Months")
plt.ylabel("Total electricity consumption (kWh)")
plt.title("Electricity consumption by months with Our Model in Caltech")
plt.xticks(rotation=45)
plt.legend()
plt.grid(True)
plt.gca().yaxis.set_major_formatter(ticker.StrMethodFormatter("{x:,.0f}"))
plt.tight_layout()
plt.show()

# --------------------------
# üîπ V·∫Ω bi·ªÉu ƒë·ªì t·ªïng chi ph√≠ ƒëi·ªán theo th√°ng
# --------------------------
plt.figure(figsize=(10, 5))
plt.plot(months, cost_without_values, label="Without Solar energy", color="orange", linestyle="--", marker="o")
plt.plot(months, cost_with_values, label="With Solar energy", color="blue", linestyle="-", marker="s")
plt.xlabel("Months")
plt.ylabel("Total Cost (EURO)")
plt.title("The cost of electricity over the months with Our Model in Caltech")
plt.xticks(rotation=45)
plt.legend()
plt.grid(True)
plt.gca().yaxis.set_major_formatter(ticker.StrMethodFormatter("{x:,.0f}"))
plt.tight_layout()
plt.show()
