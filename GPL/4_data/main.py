import json
import matplotlib.pyplot as plt
from matplotlib import ticker
import numpy as np  # Import numpy

# --------------------------
# üîπ H√†m ƒë·ªçc d·ªØ li·ªáu t·ª´ JSON
# --------------------------
def load_json(filename):
    """ƒê·ªçc file JSON v√† tr·∫£ v·ªÅ d·ªØ li·ªáu d∆∞·ªõi d·∫°ng dict (key: month, value: gi√° tr·ªã)"""
    try:
        with open(filename, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"L·ªói: Kh√¥ng t√¨m th·∫•y file {filename}")
        return {} # Tr·∫£ v·ªÅ dict r·ªóng n·∫øu file kh√¥ng t·ªìn t·∫°i
    except json.JSONDecodeError:
        print(f"L·ªói: File {filename} kh√¥ng ph·∫£i l√† JSON h·ª£p l·ªá.")
        return {}

# --------------------------
# üîπ ƒê·ªçc d·ªØ li·ªáu t·ª´ c√°c file JSON ƒë√£ l∆∞u tr∆∞·ªõc ƒë√≥
# --------------------------
# Thay ƒë·ªïi ƒë∆∞·ªùng d·∫´n n·∫øu c·∫ßn
path_optimized = "../2data_optimized/"
path_fcfs = "../2data_fcfs/"

monthly_consumption_with = load_json(f"{path_optimized}monthly_cost_with_solar.json")
monthly_consumption_without = load_json(f"{path_optimized}monthly_cost_no_solar.json")
monthly_consumption_A = load_json(f"{path_fcfs}monthly_with_solar_cost.json")
monthly_consumption_B = load_json(f"{path_fcfs}monthly_no_solar_cost.json")

# --------------------------
# üîπ Chu·∫©n b·ªã d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì
# --------------------------
# L·∫•y danh s√°ch th√°ng ƒë√£ s·∫Øp x·∫øp t·ª´ t·∫•t c·∫£ c√°c file (ch·ªâ l·∫•y keys t·ª´ c√°c dict kh√¥ng r·ªóng)
all_keys = set()
for data in [monthly_consumption_with, monthly_consumption_without, monthly_consumption_A, monthly_consumption_B]:
    if data: # Ch·ªâ th√™m keys n·∫øu dict kh√¥ng r·ªóng
        all_keys.update(data.keys())

# C·∫ßn ƒë·∫£m b·∫£o th·ª© t·ª± th√°ng l√† h·ª£p l√Ω (v√≠ d·ª•: Jan, Feb, Mar...)
# N·∫øu keys l√† "1", "2", ..., "12", s·∫Øp x·∫øp theo s·ªë
try:
    months_numeric = sorted([int(m) for m in all_keys])
    months = [str(m) for m in months_numeric]
except ValueError:
    # N·∫øu keys kh√¥ng ph·∫£i s·ªë (v√≠ d·ª•: "Jan", "Feb"), s·∫Øp x·∫øp theo alphabet ho·∫∑c logic kh√°c n·∫øu c·∫ßn
    months = sorted(list(all_keys))
    # V√≠ d·ª•: N·∫øu b·∫°n mu·ªën th·ª© t·ª± c·ª• th·ªÉ:
    # month_order = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
    # months = [m for m in month_order if m in all_keys]


print(f"Th√°ng ƒë∆∞·ª£c s·ª≠ d·ª•ng cho bi·ªÉu ƒë·ªì: {months}")

# Chu·∫©n b·ªã d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì, d√πng get(month, 0) ƒë·ªÉ x·ª≠ l√Ω th√°ng b·ªã thi·∫øu
consumption_with_values = [monthly_consumption_with.get(month, 0) for month in months]
consumption_without_values = [monthly_consumption_without.get(month, 0) for month in months]
consumption_A_values = [monthly_consumption_A.get(month, 0) for month in months]
consumption_B_values = [monthly_consumption_B.get(month, 0) for month in months]

# --------------------------
# üîπ V·∫Ω bi·ªÉu ƒë·ªì c·ªôt gh√©p
# --------------------------
x = np.arange(len(months))  # V·ªã tr√≠ s·ªë cho c√°c nh√≥m th√°ng tr√™n tr·ª•c x
bar_width = 0.2  # ƒê·ªô r·ªông c·ªßa m·ªói c·ªôt trong nh√≥m

fig, ax = plt.subplots(figsize=(15, 7)) # TƒÉng k√≠ch th∆∞·ªõc ƒë·ªÉ d·ªÖ nh√¨n h∆°n

# V·∫Ω c√°c c·ªôt, d·ªãch chuy·ªÉn v·ªã tr√≠ x cho m·ªói b·ªô d·ªØ li·ªáu
rects1 = ax.bar(x - 1.5 * bar_width, consumption_with_values, bar_width, label="With Solar (Optimal)", color="green")
rects2 = ax.bar(x - 0.5 * bar_width, consumption_without_values, bar_width, label="Without Solar (Optimal)", color="red")
rects3 = ax.bar(x + 0.5 * bar_width, consumption_A_values, bar_width, label="With Solar (FCFS)", color="purple")
rects4 = ax.bar(x + 1.5 * bar_width, consumption_B_values, bar_width, label="Without Solar (FCFS)", color="black")

# --- C·∫•u h√¨nh bi·ªÉu ƒë·ªì ---
ax.set_xlabel("Months")
ax.set_ylabel("Electricity Cost (EUR)")
ax.set_title("Monthly Electricity Cost Comparison (Optimal vs FCFS, With/Without Solar)") # C·∫≠p nh·∫≠t ti√™u ƒë·ªÅ
ax.set_xticks(x)  # ƒê·∫∑t v·ªã tr√≠ c√°c nh√£n th√°ng ·ªü gi·ªØa c√°c nh√≥m c·ªôt
ax.set_xticklabels(months, rotation=45, ha="right") # ƒê·∫∑t nh√£n th√°ng v√† xoay
ax.legend()
ax.grid(True, axis='y', linestyle='--', alpha=0.7) # Ch·ªâ hi·ªÉn th·ªã l∆∞·ªõi ngang
ax.yaxis.set_major_formatter(ticker.StrMethodFormatter("{x:,.0f}"))

plt.tight_layout() # T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh b·ªë c·ª•c cho v·ª´a v·∫∑n
plt.show()